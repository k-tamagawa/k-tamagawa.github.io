# Dockerのインストール

## wsl2にDockerをインストールする

```bash
# apt のアップデート
sudo apt update

# https経由でレポジトリを利用できるようにする
sudo apt-get install -y \
apt-transport-https \
ca-certificates \
curl \
software-properties-common

# Dockerの公式GPGを追加
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
> OK

# GPGキーの確認
sudo apt-key fingerprint 0EBFCD88

> root@TR00012613:/mnt/c/Users/310102# sudo apt-key fingerprint 0EBFCD88
> pub   rsa4096 2017-02-22 [SCEA]
>       9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
> uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
> sub   rsa4096 2017-02-22 [S]

# レポジトリの登録
sudo add-apt-repository \
"deb [arch=amd64] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) \
stable"

sudo apt-get update

# Dockerのインストール
sudo apt-get install docker-ce

# 確認
docker version
```

## Dockerサービスを起動する

  ```bash
  # 起動していなくても停止すること
  sudo service docker stop
  # サービス開始
  sudo service docker start
  ```

## Docker Composeをインストールする

  ```bash
  # ダウンロード
  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose -x http://msig.trancom-domain.local:80

  # 権限付与
  sudo chmod +x /usr/local/bin/docker-compose

  # シンボリックリンク（※すでにファイルが存在する場合はエラーになる）
  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

  # 確認
  sudo docker-compose --version

  # dockerグループを作成する（※すでにグループが存在する場合はエラーになる）
  sudo groupadd docker

  # 現行ユーザーをグループに含む
  sudo gpasswd -a $USER docker

  # サービス再起動
  sudo service docker stop
  sudo service docker start
  ```

## localhostポートフォワーディングの設定

localhost(127.0.0.1)利用時の注意点を以下に記載。

- 高速スタートアップは無効にし、完全再起動をする。

- ipv4を優先する。

  ```bat
  rem 以下の応答の場合は優先順位の変更をする
  ping localhost
  > xxx [::1]に ping を送信しています 32 バイトのデータ
  > ::1 からの応答

  rem 優先順位を変更
  netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 55 4
  netsh interface ipv6 set prefixpolicy ::1/128 50 0
  netsh interface ipv6 set prefixpolicy ::/0 40 1
  netsh interface ipv6 set prefixpolicy 2002::/16 30 2
  netsh interface ipv6 set prefixpolicy 2001::/32 5 5
  netsh interface ipv6 set prefixpolicy fc00::/7 3 13
  netsh interface ipv6 set prefixpolicy fec0::/10 1 11
  netsh interface ipv6 set prefixpolicy 3ffe::/16 1 12
  netsh interface ipv6 set prefixpolicy ::/96 1 3

  rem 確認（::ffff:0:0/96　が一番上にあればよい）
  netsh interface ipv6 show prefixpolicies

  優先順位   ラベル  プレフィックス
  ----------  -----  --------------------------------
          50      0  ::ffff:0:0/96
          40      1  ::1/128
          30      2  ::/0
          20      3  2002::/16
          5      5  2001::/32
          3     13  fc00::/7
          1     11  fec0::/10
          1     12  3ffe::/16
          1      4  ::/96

  ```

- ユーザープロファイル直下に.wslconfigを配置し、以下を記載。  
  **※おそらく不要※**

  ```text
  例 >
  %userprofile%\.wsl.config

  [wsl2]
  localhostForwarding=True
  ```

## 外部接続の設定

wsl2のipアドレスへポートフォワーディング

- wsl2のipアドレスを確認する。（コンテナ内ではない）

  ```bash
  ip a | grep eth0 | grep inet
  > inet 172.24.171.211/20 brd 172.24.175.255 scope global eth0
  ```

- ホストPCでポートフォワーディングの設定を行う

  ```bat
  rem 追加コマンド(例の1433はSQL Serverのポート番号)
  netsh interface portproxy add v4tov4 listenport=1433 listenaddress=0.0.0.0 connectport=1433 connectaddress=172.24.171.211

  rem 削除コマンド
  netsh interface portproxy delete v4tov4 listenport=1433 listenaddress=0.0.0.0

  rem 確認コマンド
  netsh interface portproxy show all
  ```

## プロキシ設定

コンテナーが HTTP、HTTPS、FTP によるプロキシーサーバーを必要とする場合に設定が必要。

- config作成。コンテナーの新規生成時や起動時には、コンテナー内に環境変数が自動的に生成される。

  ```bash
  # ホームディレクトリに移動し、.dockerディレクトリを作成する
  cd ~
  mkdir .docker

  # configファイルを生成する
  vi ~/.docker/config.json
  ```

  ```json
  {
    "proxies": {
      "default": {
        "httpProxy": "http://msig.trancom-domain.local:80",
        "httpsProxy": "http://msig.trancom-domain.local:80"
      }
    }
  }
  ```

- ターミナルで環境変数を設定

  ```bash
  export HTTP_PROXY="http://msig.trancom-domain.local:80"
  export HTTP_PROXYS="http://msig.trancom-domain.local:80"
  ```

- Dockerfile内で環境変数を設定

  ```vim
  ARG VARIANT=3-bullseye
  FROM mcr.microsoft.com/vscode/devcontainers/python:0-${VARIANT}

  ENV HTTP_PROXY=http://msig.trancom-domain.local:80
  ENV HTTP_PROXYS=http://msig.trancom-domain.local:80
  ```

- デーモンへの設定。imageをpullする際に利用される。

  ```bash
  cd /etc/default/
  vi docker
  ```

  ```bash
  # dockerファイルに以下を追記
  export no_proxy='export no_proxy=127.0.0.1,localhost'
  export NO_PROXY="${no_proxy}"
  export http_proxy='http://msig.trancom-domain.local:80/'
  export HTTP_PROXY="${http_proxy}"
  export https_proxy='http://msig.trancom-domain.local:80/'
  export HTTPS_PROXY="${https_proxy}"
  ```
