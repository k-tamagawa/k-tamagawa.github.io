# インストール

## MSYS2 インストール

gccで開発を行うため、MSYS2のインストールが必要。  
プロキシ環境化ではインストールできないため、キッティング用のIPに変更すること。  
インストール完了後、`C:\msys64\etc\profile`の最終行にプロキシ設定をし、IPを戻す。

```vim
export HTTP_PROXY="http://msig.trancom-domain.local:80"
export HTTPS_PROXY=$HTTP_PROXY
export http_proxy=$HTTP_PROXY
export https_proxy=$HTTP_PROXY
```

## 開発環境のインストール

`MSYS2 UCRT64`を起動し、以下をインストール。

```bash
# gcc
pacman -S mingw-w64-ucrt-x86_64-gcc

# make
pacman -S mingw-w64-ucrt-x86_64-make
```

## 参考資料

- Windowsのライブラリを利用したビルドについて

    ```bash
    # Wininetを利用するサンプル
    
    # -LDはwininet.libの保存場所
    # -lはwininet.libをリンク
    gcc -g sample01.c -o sample01.exe -LD:"C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.22000.0\\um\\x86" -lwininet
    ```

- Windowsのincludeファイル保存場所

  - C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include
  - C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\atlmfc\include
  - C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\VS\include
  - C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt
  - C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\um
  - C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\shared
  - C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\winrt
  - C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\cppwinrt
  - C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um

- Windowsの静的ライブラリの保存場所（.lib）

  - C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\lib\x86
  - C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\atlmfc\lib\x86
  - C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\VS\lib\x86
  - C:\Program Files (x86)\Windows Kits\10\lib\10.0.22000.0\ucrt\x86
  - C:\Program Files (x86)\Windows Kits\10\lib\10.0.22000.0\um\x86
  - C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\lib\um\x86

- 拡張子について

    | 種類          | 拡張子 | OS |
    | ------------- | ----- | --- |
    | 静的ライブラリ | lib   | Windows |
    |               | a     | Linux |
    | 動的ライブラリ | dll   | Windows |
    |               | so    | Linux |

- 依存関係の確認コマンド

    ```bash
    ldd sample01.exe
    ```

- その他ビルド

    ```bash
    # dllの作成
    gcc -c calc.cpp
    gcc calc.o -o calc.dll -shared
    
    # dllの利用方法
    gcc -c main.cpp
    gcc main.o -o main.exe calc.dll
    ```

    ```bash
    # Windows用の静的ライブラリ作成方法（lib）
    
    # -Wl リンカオプション
    # ---out-implib libを作成
    gcc calc.o -o calc.dll -shared -Wl,--out-implib,calc.lib
    ```

- `-devel`について  

    開発に必要なパッケージ群。例えば、`openssl-devel`にはCのヘッダファイルなども含まれる。
