# Sphinxの環境構築～サイト更新

<!-- <link href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" rel="stylesheet"> -->
<link href="_static/css/fontawesome6/css/all.css" rel="stylesheet" type="text/css">

<div style="background-color: Lightskyblue; padding: 5px"><font color="white"><i class="fa-solid fa-circle-info"></i><b style="padding:5px">Sphinxとは</b></font></div>
<div style="background-color: LightCyan; padding: 5px">マークアップ言語で作成したドキュメントをhtmlに変換するdocumentation generatorです。<br>
以下の手順で自PCに環境構築し、マークアップ言語を利用してこのサイトをメンテナンスしてください。
</div>
<br/>

## 始めに

- 目次について  s
  index.rstファイルとし、reStructuredTextを利用する。

- PlantUML図  
  reStructuredTextで`.. uml::`の後にに、PlantUMLの文法を利用する。

- その他コンテンツについて  
  目次以外のコンテンツを作成する時のマークアップ言語はMarkdownを利用する。

- 拡張子について
  - rst ：reStructuredText
  - md ：Markdown

## 開発環境の構築

1. Anaconda3 をインストール  
    [https://compass-upd.trancom.co.jp/gitbucket/its_ls/soft_library/tree/master/anaconda/anaconda3](https://compass-upd.trancom.co.jp/gitbucket/its_ls/soft_library/tree/master/anaconda/anaconda3)

    ```bash
    # このインストーラで動作確認しています。他のバージョンは未検証です。
    Anaconda3-2021.05-Windows-x86_64.exe
    ```

    **インストールフォルダについて**  
    `All Users(requires admin privileges)`を選択してください。

    > ![install for:](./_images/sphinx/anaconda_install_for.png)  

    **「Advanced Installation Options」について**  
    `Register Anaconda3 as the system Python 3.8`のチェックを外してください。

    > ![インストールする際のoption画面](./_images/sphinx/ANACONDA.png)  

1. プロキシ設定

    Anacondaの直下に「.condarc」ファイルを作成

    ```yaml
    proxy_servers:
      http: http://msig.trancom-domain.local:80
      https: http://msig.trancom-domain.local:80
    ```

1. Anaconda Prompt(Anaconda3)を起動

    ```bash
    「スタート」 - 「Anaconda3 (64bit)」 - 「Anaconda Prompt(Anaconda3)」を起動してください。
    ```

1. sphinx用の仮想環境を作成

    ```bat
    rem Anaconda Promptで実行
    conda create -n sphinx python=3.8.8
    ```

1. 仮想環境をsphinxに切り替えする

    ```bat
    rem Anaconda Promptで実行
    conda activate sphinx
    > (sphinx)C:\path\to
    ```

1. Markdown parser MyST-Parser をインストール

    ```bat
    rem Anaconda Promptで実行
    pip install myst-parser==0.15.1

    rem プロキシ環境化
    pip install myst-parser==0.15.1 --proxy=http://msig.trancom-domain.local:80
    ```

1. Sphinx用のテーマをインストール

    ```bat
    rem Anaconda Promptで実行
    pip install sphinx_rtd_theme==0.5.2

    rem プロキシ環境化
    pip install sphinx_rtd_theme==0.5.2 --proxy=http://msig.trancom-domain.local:80
    ```

1. PlantUML用拡張機能をインストール

    ```bat

    rem インストールできない時は以下を試す
    rem pip install --upgrade pip --proxy=http://msig.trancom-domain.local:80

    rem proxyオプションではインストールできなかった
    set HTTP_PROXY=http://msig.trancom-domain.local:80
    set HTTPS_PROXY=http://msig.trancom-domain.local:80
    pip install sphinxcontrib-plantuml==0.27
    ```

1. PlautUMLをダウンロード後、任意の場所に配置し、環境変数を設定する。  
    [https://plantuml.com/ja/download](https://plantuml.com/ja/download)  

    > ![env](./_images/sphinx/env_plantuml.png)  

## インストール後の動作確認

1. Sphinxプロジェクトを作成する

    ```bat
    rem 任意の場所にフォルダを作成
    cd C:\path\to
    mkdir sphinx01 && cd .\sphinx01
    
    rem プロジェクト作成
    sphinx-quickstart

    > ソースディレクトリとビルドディレクトリを分ける(y / n) [n]: y
    > プロジェクト名: テストプロジェクト
    > 著者名（複数可）: 自身の名前
    > プロジェクトのリリース: 0.0.1
    > プロジェクトの言語[en] : ja
    ```

1. conf.pyを編集(C:\path\to\sphinx01\source\conf.py)

    ```py
    # 拡張機能を追加
    extensions = ['myst_parser']
    extensions += ['sphinxcontrib.plantuml']

    # 拡張子と解析エンジンの紐付け
    source_suffix = {
        '.rst': 'restructuredtext',
        '.txt': 'markdown',
        '.md': 'markdown',
    }

    # テーマを変更
    html_theme = 'sphinx_rtd_theme'

    # PlantUML
    import os
    plantuml=f'java -jar {os.environ["PLANTUML_JAR_PATH"]}'
    ```

1. プロジェクトをhtmlファイルに変換する

    ```bat
    rem 以下を実行。エラーや警告がなければOK。
    make html

    rem index.htmlを確認する
    explorer .\build\html\index.html
    ```

1. 作成したプロジェクトを削除してください。

## VSCodeの準備

1. VSCode（Visual Studio Code)をインストール  
    [https://azure.microsoft.com/ja-jp/products/visual-studio-code/](https://azure.microsoft.com/ja-jp/products/visual-studio-code/
)

1. VSCodeに拡張機能を追加  
   ・Python　`ms-python.python`  

1. Pythonのバージョン確認  
    `conf.py`を開き、VSCode画面左下のPythonのバージョンを以下になるようにクリックして選択してください。  
    ![VSCodeのPython](./_images/sphinx/vscode_python.png)

## VSCodeでreStructuredTextプレビューの設定

1. reStructuredText用の言語サーバーのインストール  

    ```bat
    rem Anaconda Promptで実行
    pip install esbonio==0.16.2

    rem プロキシ環境化
    pip install esbonio==0.16.2 --proxy=http://msig.trancom-domain.local:80
    ```

1. VSCodeに拡張機能を追加  
    ・Esbonio　`swyddfa.esbonio`  

- **その他**

    VSCodeのプレビューが最新化されない場合は以下のバッチを実行後、再度確認してください。

    ```bat
    rem _buildフォルダの内容がプレビューされるため、それに対してmake htmlを行うバッチ
    make_rst_preview.bat
    ```

## Sphinxサイトのソース編集

1. Gitからクローンする。

    ```bash
    #Git Bash

    #サーバーから複製する（１回のみの作業）
    git clone https://compass-upd.trancom.co.jp/gitbucket/git/its_ls/sphinx.git
    ```

1. 開発用のブランチを作成する。

    ```bash
    # Git Bash

    # masterから自分のユーザー名でブランチを作成する
    git branch my_user_name 
    git checkout my_user_name
    ```

1. ソースを編集をし、コミットする。

    ```bash
    # Git Bash

    # my_user_nameブランチで作業。
    # 各コンテンツ(md)、index.rstを編集し、コミットする
    git add sample.md
    git commit -m "xxx機能の追加"　-m "改行したい場合は２回目のmオプション"
    ```

1. バージョンを更新し、コミットする。

    ```py
    # conf.pyの編集

    # The full version, including alpha/beta/rc tags
    release = '0.0.45'
    ```

    ```javascript
    // service-worker.jsの編集
    // conf.pyのバージョンと合わせる
    const CACHE_NAME = 'cache-v0.0.45';
    ```

    ```bash
    # Git Bash

    # コミットを忘れずに
    git add conf.py
    git commit -m "バージョンを更新 v0.0.45"
    ```

## Sphinxサイトのリリース

1. ソース編集後、htmlに変換する。

    ```bat
    rem Anaconda Prompt

    rem 既存のbuildフォルダを削除
    rmdir /s /q build

    rem htmlに変換する。
    rem make html

    rem htmlに変換し、サービスワーカー用に調整する
    build.bat

    rem htmlの確認
    explorer .\build\html\index.html
    ```

1. masterにマージ後、プッシュする。

    ```bash
    # Git Bash

    # masterへの切替
    git checkout master

    # マージ（コミット履歴を残す）
    git merge my_user_name

    # masterブランチをプッシュする
    git push

    # masterブランチを元にタグを作成する
    # yyyymmddは日時、99は連番としてください。
    # conf.pyに記載のリリースバージョンをコメントに記載してください。
    git tag -am "0.0.45" reyyyymmdd_99

    #タグをプッシュする
    git push origin reyyyymmdd_99
    ```

## サイトの更新

  1. bjs-kouseiknriにリモート接続する

  1. バックアップを取得する

      ```vim
      移動元：D:\xampp\htdocs\sphinx\
      移動先：D:\xampp\htdocs\_bk\y.y.y

      # x.x.x-x は配置されている最新バージョンフォルダとなります。
      # y.y.y はconf.pyに記載のリリースバージョンとなります。

      # バックアップフォルダイメージ
      htdocs  
        └─ _bk  
            └─ 0.0.1
                └─ sphinx
      ```

  1. D:\xampp\htdocs\sphinxに`build(make html)`で作成されたbuildフォルダ内のdoctreesとhtmlを配置する。

      ```vim
      sphinx
        ├─doctrees
        └─ html
            │ index.html
            └─ 
      ```

  1. ブラウザで確認する。  
      [https://compass-upd.trancom.co.jp/sphinx/html/index.html](https://compass-upd.trancom.co.jp/sphinx/html/index.html)

## 画面が最新に更新されない時

- 「プライバシーとセキュリティ」－「サイトの設定」－「すべてのサイトに保存されている権限とデータを表示」で`compass-upd.trancom.co.jp`を選択し、<i class="fa-solid fa-trash">(削除)</i>をクリックする。  
    ![Chrome Data Delete](./_images/sphinx/trancomcojp.png)

## その他

- vscodeのプロキシ設定  
  ![VSCodeのProxy](./_images/sphinx/vscode_proxy.png)

- pipでのアンインストール

    ```bat
    pip uninstall snooty-lextudio
    ```

- pipのインストール一覧

    ```bat
    pip list
    ```

- コードブロックで利用できるシンタックスハイライトの確認方法

    ```bat
    rem pygments というライブラリを利用しているらしい
    pygmentize -L lexers
    ```

- 参考URL  
  - [reStructuredText入門](https://www.sphinx-doc.org/ja/master/usage/restructuredtext/basics.html)
  - [【マークダウン記法とは？】マークダウンの書き方を網羅的に解説](https://backlog.com/ja/blog/how-to-write-markdown/)
  - [Markdown記法についてまとめてみた](https://qiita.com/toshihirooya/items/949f571b85cd7c297cca)  
  - [一目でわかるPlantUML](https://plantuml.com/ja)
