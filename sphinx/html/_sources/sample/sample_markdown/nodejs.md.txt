# [Node.js v15.4](https://nodejs.org/api/https.html)

<div style="background-color: Lightskyblue; padding: 5px"><font color="white"><b>注釈</b></font></div>
<div style="background-color: LightCyan; padding: 5px">
画面右上の <a href="../../_sources/sample/sample_markdown/mattermost.md.txt">View page source</a> をクリックするとマークダウンを確認できます。<br>文字化けする場合はChromeだと拡張機能でCharsetを追加してください。
</div>　

---
1. [https.createServer](#node-https)
1. [http2.createSecureServer](#node-http2sec)

---

<a id="node-https"></a>

**https.createServer([options][,requestListener]**

* `options` \<Object\> tls.createServer(), tls.createSecureContext(), およびhttp.createServer()からの`options`を受け入れます。
* `requestListener` \<Function\> requestイベントに追加されるリスナー
* `Returns`: \<https.Server\>

```javascript
// curl -k https://localhost:8000/
const https = require('https');
const fs = require('fs');

const options = {
  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')
}
https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```
Or
```javascript
const https = require('https');
const fs = require('fs');

const options = {
  pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),
  passphrase: 'sample'
}

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000)
```

<a id="node-http2sec"></a>

**http2.createSecureServer(options[,onRequestHeader]**)

* `options` \<Object\>
  * `allowHTTP1` \<boolean\> HTTP2をサポートしていない着信接続クライアントは、trueに設定する時、ダウングレードされるでしょう。[unknownProtocol](https://nodejs.org/api/http2.html#http2_event_unknownprotocol)を参照してください。[ALPN negotiation](https://nodejs.org/api/http2.html#http2_alpn_negotiation)を参照してください。デフォルト：false。
  * `maxDeflateDynamicTableSize` \<number\> ヘッダーフィールドを圧縮するための最大動的テーブルサイズを設定します。デフォルト：4kib。
  * `maxSettings`  \<number\> SETTINGSフレームごとの設定エントリの最大数を設定します。デフォルト：32。
  * maxSessionMemory \<number\> HTTP2セッションが利用を許可されている最大メモリを設定します。この値はメガバイト単位で表されます。例: 1は1メガバイトに等しい。許可された最小値は1です。これはクレジットベースの制限です。既存のHttp2Streamはこの制限を超えられる可能性がある。しかし、新しいHttp2Streamインスタンスはこの制限が超えられている間は拒否されます。現在のHttp2Streamセッション数、現在のヘッダーアシュクテーブルの使用量、減算の送信キューデータ、未確認のPingとSETTINGフレームはすべて現在の制限にカウントされます。デフォルト:10。
  * ??
  * ??
* `onRequestHandler` \<Function\> [Compatibility API](https://nodejs.org/api/http2.html#http2_compatibility_api) を参照してください。

* 戻り値: \<Http2SecureServer\>

Http2セッションインスタンスを作成、管理するtlsサーバーインスタンスを返します。
```javascript
const http2 = require('http2');
const fs = require('fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem')
};

// Create a secure HTTP/2 server
const server = http2.createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(80);
```

